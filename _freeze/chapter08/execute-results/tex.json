{
  "hash": "56e87cfe22177541b5b94cc2002974a8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nnumber-sections: true\nexecute:\n  freeze: auto\n---\n\n<!-- :::{.callout-note}\nThis chapter is based on \"Chapter 6: Vertical and horizontal transmission\" in @Acerbi2022.\n::: -->\n\n# Vertical and horizontal cultural transmission {#sec-vertical-horizontal}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nrng = np.random.default_rng()\n\nimport pandas as pd\nfrom tqdm import tqdm\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef plot_multiple_runs(data_model):\n    groups = data_model.groupby(\"run\")\n    for _, g in groups:\n        g.index = g[\"generation\"]\n        g[\"p\"].plot(lw=.5, ylim=(0,1))\n\n    data_model.groupby(\"generation\")[\"p\"].mean().plot(c=\"k\", lw=\"1\")\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef vertical_transmission(N, p_0, b, t_max, r_max):\n    # Create the output DataFrame\n    output = pd.DataFrame({\n        \"generation\" : np.tile(np.arange(t_max), r_max),\n        \"p\" : [ np.nan ] * t_max * r_max,\n        \"run\" : np.repeat(np.arange(r_max), t_max)\n    })\n\n    for r in range(r_max): \n        # Create first generation\n        population = pd.DataFrame({\"trait\": rng.choice([\"A\", \"B\"], size=N, replace=True, p=[p_0, 1 - p_0])})\n\n        # Add first generation's p for run r\n        output.loc[ r * t_max, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n        # # For each generation \n        for t in range(1, t_max): \n            # Copy individuals to previous_population DataFrame\n            previous_population = population.copy()\n\n            # randomly pick mothers and fathers\n            mother = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n            father = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n\n            # prepare next generation\n            population = pd.DataFrame({\"trait\": [np.nan] * N })\n\n            # Both parents are A, thus child adopts A\n            both_A = (mother == \"A\") & (father == \"A\")\n            # if sum(both_A) > 0:\n            population.loc[both_A,\"trait\"] = \"A\"\n\n            # Both parents are A, thus child adopts A\n            both_B = (mother == \"B\") & (father == \"B\")\n            # if sum(both_B) > 0:\n            population.loc[both_B,\"trait\"] = \"B\"\n\n            # If any empty NA slots are present (i.e. one A and one B parent) they adopt A with probability b\n            remaining = rng.choice([\"A\", \"B\"], size=population[\"trait\"].isna().sum(), replace=True, p=[b, 1 - b])\n            population.loc[population[\"trait\"].isna(),\"trait\"] = remaining\n            \n            # Get p and put it into output slot for this generation t and run r\n            output.loc[r * t_max + t, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n    return output \n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndata_model = vertical_transmission(N=10_000, p_0=0.01, b=0.6,t_max=50, r_max=5)\n\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata_model = vertical_transmission(N=10_000, p_0=0.1, b=0.5,t_max=50, r_max=5)\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-pdf/cell-6-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef vertical_horizontal_transmission(N, p_0, b, n, g, t_max, r_max):\n    # Create an empty dataframe for the output\n    output = pd.DataFrame({\n        'generation': np.tile(np.arange(1, t_max + 1), r_max),\n        'p': np.full(t_max * r_max, np.nan),\n        'run': np.repeat(np.arange(1, r_max + 1), t_max)\n    })\n    \n    for r in range(r_max):\n        # Create first generation\n        population = pd.DataFrame({\n            'trait': np.random.choice(['A', 'B'], size=N, p=[p_0, 1 - p_0])\n        })\n        \n        # Add first generation's p for run r\n        output.loc[(output['generation'] == 1) & (output['run'] == r + 1), 'p'] = (population['trait'] == 'A').sum() / N\n        \n        for t in range(1, t_max):\n            # Vertical transmission --------------------------------------------------\n            \n            # Copy individuals to previous_population dataframe\n            previous_population = population.copy()\n            \n            # Randomly pick mothers and fathers\n            mother = np.random.choice(previous_population['trait'], N, replace=True)\n            father = np.random.choice(previous_population['trait'], N, replace=True)\n            \n            # Prepare next generation\n            population = pd.DataFrame({'trait': [np.nan] * N})\n            \n            # Both parents are A, thus child adopts A\n            both_A = (mother == 'A') & (father == 'A')\n            population.loc[both_A, 'trait'] = 'A'\n            \n            # Both parents are B, thus child adopts B\n            both_B = (mother == 'B') & (father == 'B')\n            population.loc[both_B, 'trait'] = 'B'\n            \n            # If any empty NA slots (i.e. one A and one B parent) are present\n            if population['trait'].isna().any():\n                # They adopt A with probability b\n                population.loc[population['trait'].isna(), 'trait'] = np.random.choice(\n                    ['A', 'B'],\n                    size=population['trait'].isna().sum(),\n                    p=[b, 1 - b]\n                )\n            \n            # Horizontal transmission ------------------------------------------------\n            \n            # Previous_population are children before horizontal transmission\n            previous_population = population.copy()\n            \n            # N_B = number of Bs\n            N_B = (previous_population['trait'] == 'B').sum()\n            \n            # If there are B individuals to switch, and n is not zero\n            if N_B > 0 and n > 0:\n                # For each B individual...\n                for i in range(N_B):\n                    # Pick n demonstrators\n                    demonstrator = np.random.choice(previous_population['trait'], n, replace=True)\n                    # Get probability g\n                    copy = np.random.choice([True, False], size=n, p=[g, 1 - g])\n                    \n                    # If any demonstrators with A are to be copied\n                    if (demonstrator == 'A').any() & copy.any():\n                        # The B individual switches to A\n                        b_indices = previous_population[previous_population['trait'] == 'B'].index\n                        population.loc[b_indices[i], 'trait'] = 'A'\n            \n            # Get p and put it into output slot for this generation t and run r\n            output.loc[(output['generation'] == t + 1) & (output['run'] == r + 1), 'p'] = (population['trait'] == 'A').sum() / N\n    \n    return output\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nvertical_horizontal_transmission(N=1000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=10, r_max=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\begin{tabular}{lrrr}\n\\toprule\n{} &  generation &      p &  run \\\\\n\\midrule\n0 &           1 &  0.007 &    1 \\\\\n1 &           2 &  0.011 &    1 \\\\\n2 &           3 &  0.023 &    1 \\\\\n3 &           4 &  0.065 &    1 \\\\\n4 &           5 &  0.169 &    1 \\\\\n5 &           6 &  0.411 &    1 \\\\\n6 &           7 &  0.618 &    1 \\\\\n7 &           8 &  0.758 &    1 \\\\\n8 &           9 &  0.851 &    1 \\\\\n9 &          10 &  0.908 &    1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata_model = vertical_horizontal_transmission(N=5_000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=50, r_max=2)\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-pdf/cell-9-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "chapter08_files/figure-pdf"
    ],
    "filters": []
  }
}